const fs = require("fs");

// File for player data
const gameFile = __dirname + "/truth_dare_data.json";

// Load & save data
function loadData() {
  if (!fs.existsSync(gameFile)) return { players: [], turn: 0, mode: "truth" };
  return JSON.parse(fs.readFileSync(gameFile));
}
function saveData(data) {
  fs.writeFileSync(gameFile, JSON.stringify(data, null, 2));
}

// Truth & Dare questions
const truths = [
  "‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶∂‡ßá‡¶∑ ‡¶ï‡¶¨‡ßá ‡¶ï‡¶æ‡¶∞‡ßã ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßá‡¶Å‡¶¶‡ßá‡¶õ‡¶ø‡¶≤‡ßá? üò¢",
  "‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ crush ‡¶ï‡ßá? üôà",
  "‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶¨‡ßú secret‡¶ü‡¶æ ‡¶ï‡ßÄ?",
  "‡¶ï‡¶æ‡¶ï‡ßá ‡¶™‡¶õ‡¶®‡ßç‡¶¶ ‡¶ï‡¶∞‡ßã ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶¨‡¶≤‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã ‡¶®‡¶æ?",
  "‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡¶ø ‡¶ï‡¶ñ‡¶®‡ßã ‡¶ï‡¶æ‡¶∞‡ßã ‡¶∏‡¶æ‡¶•‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶æ‡¶∞‡¶£‡¶æ ‡¶ï‡¶∞‡ßá‡¶õ‡ßã?",
  "‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡ßã‡¶® ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶∞ ‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡ßá ‡¶™‡ßú‡ßá‡¶õ‡¶ø‡¶≤‡ßá ‡¶ï‡¶ñ‡¶®‡ßã? üòè",
  "‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶¨‡¶æ‡¶ú‡ßá ‡¶ï‡¶æ‡¶ú‡¶ü‡¶æ ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø‡¶≤‡ßá ‡¶ï‡ßã‡¶®‡¶ü‡¶æ?",
  "‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡¶æ‡¶ï‡ßá ‡¶®‡¶ø‡ßü‡ßá ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶¨‡ßá‡¶∂‡¶ø ‡¶≠‡¶æ‡¶¨‡ßã?",
  "‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶ï‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶¶‡ßÉ‡¶∂‡ßç‡¶Ø ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶§‡ßá, ‡¶ï‡¶æ‡¶ï‡ßá ‡¶Ü‡¶ó‡ßá ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶Ø‡ßá‡¶§‡ßá?",
  "‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶¨‡ßú ‡¶≠‡ßü‡¶ü‡¶æ ‡¶ï‡ßÄ?"
];

const dares = [
  "‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶¨‡¶≤‡ßã ‚Äî ‚Äò‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ü‡¶æ ‡¶π‡¶æ‡¶Å‡¶∏ ü¶Ü‚Äô",
  "‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ crush ‡¶è‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¨‡¶≤‡ßã loud ‡¶ï‡¶∞‡ßá! üòÜ",
  "‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ø‡ßá ‡¶ó‡¶æ‡¶®‡¶ü‡¶æ ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶¨‡¶æ‡¶ú‡ßá ‡¶ó‡¶æ‡¶ì, ‡¶∏‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶ì üé§",
  "‡¶®‡¶ø‡¶ú‡ßá‡¶∞ dp ‡¶§‡ßá ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶¶‡¶æ‡¶ì ü§≠",
  "‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶´‡ßã‡¶®‡ßá‡¶∞ ‡¶ó‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶∞‡¶ø‡¶∞ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶õ‡¶¨‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶ì üì∏",
  "‡ß´‡¶ü‡¶æ ‡¶á‡¶Æ‡ßã‡¶ú‡¶ø ‡¶¶‡¶ø‡ßü‡ßá ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶Æ‡ßÅ‡¶° ‡¶¨‡ßã‡¶ù‡¶æ‡¶ì üòú",
  "‡¶Ø‡¶æ‡¶ï‡ßá ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶ï‡¶Æ ‡¶™‡¶õ‡¶®‡ßç‡¶¶ ‡¶ï‡¶∞‡ßã, ‡¶§‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶æ ‡¶™‡ßç‡¶∞‡¶∂‡¶Ç‡¶∏‡¶æ ‡¶¶‡¶æ‡¶ì üòè",
  "‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶¨‡¶≤‡ßã ‚Äî ‚Äò‡¶Ü‡¶Æ‡¶ø ‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡ßá ‡¶™‡¶á‡¶∞‡¶æ ‡¶ó‡ßá‡¶õ‡¶ø üíò‚Äô",
  "‡¶è‡¶ï‡¶ü‡¶æ ‡¶ú‡ßã‡¶ï ‡¶¨‡¶≤‡ßã ‚Äî ‡¶∏‡¶¨‡¶æ‡¶á ‡¶π‡¶æ‡¶∏‡¶≤‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ú‡¶ø‡¶§‡¶¨‡ßá üòÇ",
  "‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶™‡¶æ‡¶∂‡ßá ‡¶•‡¶æ‡¶ï‡¶æ ‡¶ú‡¶ø‡¶®‡¶ø‡¶∏‡¶ü‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¨‡¶≤‡ßã ‚Äî ‡¶è‡¶ñ‡¶®‡¶á ‡¶∏‡ßá‡¶ü‡¶æ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡¶ø‡¶ï/‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡¶ø‡¶ï‡¶æ üòÜ"
];

module.exports.config = {
  name: "truthordare",
  version: "3.0",
  hasPermssion: 0,
  credits: "Ullash + GPT Upgrade",
  description: "Funny Truth or Dare game with join list, timer, respect & stop system üòé",
  commandCategory: "game",
  usages: "[join/start/list/stop]",
  cooldowns: 0
};

module.exports.run = async function({ api, event, args, Users }) {
  const data = loadData();
  const uid = event.senderID;
  const name = await Users.getNameUser(uid);
  const cmd = args[0];

  if (!global.client.truthOrDareTimers) global.client.truthOrDareTimers = [];

  // ‚úÖ STOP COMMAND
  if (cmd === "stop") {
    if (data.players.length === 0)
      return api.sendMessage("üòÖ ‡¶ó‡ßá‡¶Æ ‡¶§‡ßã ‡¶è‡¶ñ‡¶®‡ßã ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶á ‡¶π‡ßü‡¶®‡¶ø!", event.threadID);

    // ‡¶∏‡¶¨ ‡¶ü‡¶æ‡¶á‡¶Æ‡¶æ‡¶∞ clear ‡¶ï‡¶∞‡ßã
    for (const t of global.client.truthOrDareTimers) clearTimeout(t);
    global.client.truthOrDareTimers = [];

    // ‡¶∏‡¶¨ reply ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡ßã
    if (global.client.handleReply) {
      global.client.handleReply = global.client.handleReply.filter(h => h.name !== "truthordare");
    }

    // ‡¶°‡¶æ‡¶ü‡¶æ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßã
    data.players = [];
    data.turn = 0;
    saveData(data);

    return api.sendMessage("üõë ‡¶ó‡ßá‡¶Æ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶¨ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‚úÖ", event.threadID);
  }

  // ‚úÖ JOIN SYSTEM
  if (cmd === "join") {
    if (data.players.find(p => p.id === uid))
      return api.sendMessage(`üòÑ ${name}, ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ü‡¶ó‡ßá‡¶á ‡¶ñ‡ßá‡¶≤‡¶æ‡ßü ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡ßü‡ßá‡¶õ‡ßã!`, event.threadID);
    data.players.push({ id: uid, name });
    saveData(data);
    return api.sendMessage(`‚úÖ ${name} ‡¶ñ‡ßá‡¶≤‡¶æ‡ßü ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡ßü‡ßá‡¶õ‡ßá!`, event.threadID);
  }

  // ‚úÖ LIST SYSTEM
  if (cmd === "list") {
    if (data.players.length === 0)
      return api.sendMessage("‡¶ï‡ßá‡¶â ‡¶è‡¶ñ‡¶®‡ßã ‡¶ñ‡ßá‡¶≤‡¶æ‡ßü ‡¶Ø‡ßã‡¶ó ‡¶¶‡ßá‡ßü‡¶®‡¶ø üòÖ", event.threadID);
    const list = data.players.map((p, i) => `${i + 1}. ${p.name}`).join("\n");
    return api.sendMessage(`üéÆ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶ñ‡ßá‡¶≤‡ßã‡ßü‡¶æ‡ßú‡¶¶‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ:\n${list}`, event.threadID);
  }

  // ‚úÖ START GAME
  if (cmd === "start") {
    if (data.players.length < 2)
      return api.sendMessage("‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ß® ‡¶ú‡¶® join ‡¶ï‡¶∞‡¶≤‡ßá‡¶á ‡¶ñ‡ßá‡¶≤‡¶æ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶¨‡ßá üòÖ", event.threadID);

    data.turn = 0;
    saveData(data);
    startTurn(api, event, data);
    return;
  }

  return api.sendMessage("üîπ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßã:\ntruthordare join\ntruthordare list\ntruthordare start\ntruthordare stop", event.threadID);
};

// ======================= HANDLE REPLIES =======================
module.exports.handleReply = async function({ api, event, handleReply }) {
  const data = loadData();
  const player = handleReply.player;
  const uid = event.senderID;
  const text = event.body.toLowerCase();

  if (handleReply.type === "choose" && uid === player.id) {
    clearTimeout(handleReply.timer);
    if (text.includes("truth")) {
      const q = truths[Math.floor(Math.random() * truths.length)];
      return api.sendMessage(`üí¨ Truth: ${q}`, event.threadID, (err, info) => {
        global.client.handleReply.push({
          name: "truthordare",
          messageID: info.messageID,
          type: "answer",
          player
        });
      });
    } else if (text.includes("dare")) {
      const d = dares[Math.floor(Math.random() * dares.length)];
      return api.sendMessage(`üî• Dare: ${d}\n\n‡¶¶‡ßá‡ßü‡¶æ ‡¶ï‡¶æ‡¶ú ‡¶∂‡ßá‡¶∑ ‡¶π‡¶≤‡ßá ‡¶≤‡¶ø‡¶ñ‡ßã "done ‚úÖ"`, event.threadID, (err, info) => {
        global.client.handleReply.push({
          name: "truthordare",
          messageID: info.messageID,
          type: "dare",
          player
        });
      });
    } else {
      return api.sendMessage(`‚ùó ‡¶∂‡ßÅ‡¶ß‡ßÅ "Truth" ‡¶¨‡¶æ "Dare" ‡¶≤‡¶ø‡¶ñ‡ßã ${player.name}`, event.threadID);
    }
  }

  // ‡¶Ø‡¶¶‡¶ø player truth ‡¶è‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡ßá‡ßü
  if (handleReply.type === "answer" && uid === player.id) {
    api.sendMessage(`üòÑ ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ${player.name}!`, event.threadID);
    return nextTurn(api, event, data);
  }

  // ‡¶Ø‡¶¶‡¶ø dare ‡¶∂‡ßá‡¶∑ ‡¶ï‡¶∞‡ßá
  if (handleReply.type === "dare" && uid === player.id && text.includes("done")) {
    api.sendMessage(`ü´° Respect ${player.name}! ‡¶§‡ßÅ‡¶Æ‡¶ø Dare complete ‡¶ï‡¶∞‡ßá‡¶õ‡ßã üí•`, event.threadID);
    return nextTurn(api, event, data);
  }
};

// ======================= NEXT TURN =======================
function startTurn(api, event, data) {
  const current = data.players[data.turn];
  api.sendMessage(
    `üéØ ‡¶è‡¶ñ‡¶® ${current.name}-‡¶è‡¶∞ ‡¶™‡¶æ‡¶≤‡¶æ!\n‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡¶ø Truth ‡¶®‡¶æ Dare ‡¶®‡¶ø‡¶§‡ßá ‡¶ö‡¶æ‡¶ì? (reply ‡¶ï‡¶∞‡ßã)`,
    event.threadID,
    (err, info) => {
      const timer = setTimeout(() => {
        api.sendMessage(`‚è∞ ‡¶∏‡¶Æ‡ßü ‡¶∂‡ßá‡¶∑! ${current.name} ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡ßá‡ßü‡¶®‡¶ø... skip ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã üòÖ`, event.threadID);
        nextTurn(api, event, data);
      }, 30000);

      global.client.truthOrDareTimers.push(timer);

      global.client.handleReply.push({
        name: "truthordare",
        messageID: info.messageID,
        type: "choose",
        player: current,
        timer
      });
    }
  );
}

function nextTurn(api, event, data) {
  data.turn = (data.turn + 1) % data.players.length;
  saveData(data);
  startTurn(api, event, data);
                             }
